{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Models/marketDetailsResponse.ts","webpack:///src/app/Models/messageModel.ts","webpack:///src/app/Modules/about/about.component.ts","webpack:///src/app/Modules/about/about.component.html","webpack:///src/app/Modules/friendly-message/friendly-message.component.ts","webpack:///src/app/Modules/friendly-message/friendly-message.component.html","webpack:///src/app/Modules/load-spinner/load-spinner.component.ts","webpack:///src/app/Modules/load-spinner/load-spinner.component.html","webpack:///src/app/Services/geolocation.service.ts","webpack:///src/app/Services/markets.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","MarketDetailsResponse","MessageModel","button","AboutComponent","dialogRef","close","selector","templateUrl","styleUrls","FriendlyMessageComponent","data","message","timeout","setTimeout","LoadSpinnerComponent","GeolocationService","reject","navigator","geolocation","getCurrentPosition","resp","lat","coords","latitude","lon","longitude","err","providedIn","MarketsService","http","version","baseUrl","zip","url","get","marketId","routes","AppRoutingModule","forRoot","imports","AppComponent","marketServ","formBuilder","geoServ","dialog","markets","marketDetail","gettingList","gettingDetails","zipFormGroup","group","pattern","maxLength","minLength","open","width","maxWidth","height","maxHeight","event","key","listMarketsByZip","valid","value","setGettingListValue","subscribe","list","response","reset","getPosition","location","listMarketsByLocation","toString","setGettingDetailValue","getMarketDetailsById","details","console","log","stopPropagation","market","find","item","marketNumber","isFavorite","flipFavoriteStatusById","fav","openInfo","checkForEnter","AppModule","declarations","providers","bootstrap","entryComponents","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export class MarketDetailsResponse {\r\n    address: string;\r\n    googleAddressUrl: string;\r\n    products: string[];\r\n    schedule: string[];\r\n}","export class MessageModel {\r\n    title: string;\r\n    message: string;\r\n    message2: string;\r\n    button: string;\r\n    timeout: number;\r\n\r\n    constructor(){\r\n        this.button = \"OK\";\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.scss']\r\n})\r\nexport class AboutComponent implements OnInit {\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AboutComponent>,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<h2>About FMF (Farmer's Market Finder)</h2>\r\n<p>This application was constructed using an ASP.NET Core Web API.</p>\r\n<p>The API uses Entity Framework Core and an Azure SQL Database</p>\r\n<p>The front-end (this site) is created using Angular 9 and Material Design Components</p>\r\n<p>With this application, you're able to use either a zip code or your current location to find Farmers' Markets near you.</p>\r\n<p>The list is ordered by distance, and you're able to view details about each farm when clicked on, and favorite the ones you like.</p>\r\n<p>On top of storing and retrieving information about the markets in the SQL Database, all user actions are stored in the database as well, for audit and tracking reasons.</p>\r\n<p>For extras, check out the <a href=\"https://trello.com/b/T5xt0Bd0/farmers-market\" target=\"_blank\">Trello Board</a> that was used to create this project.</p>\r\n<button mat-raised-button (click)=\"close()\">Close</button>\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MessageModel } from 'src/app/Models/messageModel';\r\n\r\n@Component({\r\n  selector: 'app-friendly-message',\r\n  templateUrl: './friendly-message.component.html',\r\n  styleUrls: ['./friendly-message.component.scss']\r\n})\r\nexport class FriendlyMessageComponent implements OnInit {\r\n\r\n  message: MessageModel = new MessageModel();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<FriendlyMessageComponent>,\r\n    @Inject(MAT_DIALOG_DATA) data,\r\n  ) { \r\n    this.message = data;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if(this.message.timeout > 0) {\r\n      setTimeout(() => {\r\n        this.close();\r\n      }, this.message.timeout);\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <h3 fxLayoutAlign=\"center center\" *ngIf=\"message\">{{message.title}}</h3>\r\n    <p class=\"message\">{{message.message}}</p>\r\n    <p *ngIf=\"message.message2\">{{message.message2}}</p>\r\n    <div id=\"confirmButtonDiv\" fxLayoutAlign=\"end center\">\r\n      <button mat-raised-button (click)=\"close()\">{{message.button}}</button>\r\n    </div>\r\n  </div>\r\n   ","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-load-spinner',\r\n  templateUrl: './load-spinner.component.html',\r\n  styleUrls: ['./load-spinner.component.scss']\r\n})\r\nexport class LoadSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<img class=\"rotate\" src=\"../../../assets/Images/appleLoader.png\"/>\r\n","import { Injectable } from '@angular/core';\r\nimport { Geolocation } from '../Models/geolocation';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GeolocationService {\r\n\r\n  constructor() { }\r\n\r\n  getPosition(): Promise<Geolocation> {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(resp => {\r\n        resolve({lat: resp.coords.latitude, lon: resp.coords.longitude});\r\n      }, err => {\r\n        reject(err);\r\n      });\r\n    })\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ListMarketsResponse } from '../Models/listMarketsResponse';\r\nimport { MarketDetailsResponse } from '../Models/marketDetailsResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MarketsService {\r\n\r\n  private version: string = \"/v1/market\";\r\n  private baseUrl: string = `${environment.baseUrl}${this.version}`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  listMarketsByZip(zip: string) {\r\n    const url = `${this.baseUrl}/zip/${zip}`; \r\n    return this.http.get<ListMarketsResponse>(url);\r\n  }\r\n\r\n  listMarketsByLocation(lat: string, lon: string) {\r\n    const url = `${this.baseUrl}/location?lat=${lat}&lon=${lon}`\r\n    return this.http.get<ListMarketsResponse>(url);\r\n  }\r\n\r\n  getMarketDetailsById(marketId: string) {\r\n    const url = `${this.baseUrl}/details/${marketId}`;\r\n    return this.http.get<MarketDetailsResponse>(url);\r\n  }\r\n\r\n  flipFavoriteStatusById(marketId: string) {\r\n    const url = `${this.baseUrl}/favorite/${marketId}`;\r\n    return this.http.get<boolean>(url);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MarketsService } from './Services/markets.service';\r\nimport { Market } from './Models/market';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { GeolocationService } from './Services/geolocation.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FriendlyMessageComponent } from './Modules/friendly-message/friendly-message.component';\r\nimport { AboutComponent } from './Modules/about/about.component';\r\nimport { MarketDetailsResponse } from './Models/marketDetailsResponse';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  markets: Market[] = [];\r\n  marketDetail: MarketDetailsResponse = new MarketDetailsResponse();\r\n  zipFormGroup: FormGroup;\r\n  gettingList: boolean = false;\r\n  gettingDetails: boolean = false;\r\n  \r\n  constructor(\r\n    private marketServ: MarketsService,\r\n    private formBuilder: FormBuilder,\r\n    private geoServ: GeolocationService,\r\n    private dialog: MatDialog,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.zipFormGroup = this.formBuilder.group( {\r\n      zip: ['', [\r\n        Validators.pattern('[0-9]*'),\r\n        Validators.maxLength(5), \r\n        Validators.minLength(5),\r\n      ]],\r\n    });\r\n  }\r\n\r\n  openInfo() {\r\n    this.dialog.open(AboutComponent, {\r\n      width: \"80%\", \r\n      maxWidth: \"500px\",\r\n      height: \"auto\", \r\n      maxHeight: \"95vh\"\r\n    });\r\n  }\r\n\r\n  setGettingListValue() {\r\n    this.gettingList = true;\r\n    setTimeout(() => {\r\n      this.gettingList = false;\r\n    }, 3000);\r\n  }\r\n\r\n  setGettingDetailValue() {\r\n    this.gettingDetails = true;\r\n    setTimeout(() => {\r\n      this.gettingDetails = false;\r\n    }, 10000);\r\n  }\r\n\r\n  checkForEnter(event) {\r\n    if(event.key == \"Enter\") {\r\n      this.listMarketsByZip();\r\n    }\r\n  }\r\n\r\n  listMarketsByZip() {\r\n    if(this.zipFormGroup.valid && this.zipFormGroup.value.zip && this.zipFormGroup.value.zip != \"00000\") {\r\n      this.setGettingListValue();\r\n      this.marketServ.listMarketsByZip(this.zipFormGroup.value.zip).subscribe(list => {\r\n        this.markets = list.response;\r\n        this.gettingList = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  listMarketsByLocation() {\r\n    this.setGettingListValue();\r\n    this.zipFormGroup.reset();\r\n    this.geoServ.getPosition().then(location => {\r\n      if(location && location.lon && location.lon) {\r\n        //if location is found, get list of marekts.\r\n        this.marketServ.listMarketsByLocation(location.lat.toString(), location.lon.toString()).subscribe(list => {\r\n          this.markets = list.response;\r\n          this.gettingList = false;\r\n        });\r\n      }\r\n      else {\r\n        //throw error\r\n        this.gettingList = false;\r\n        this.dialog.open(FriendlyMessageComponent, {\r\n          width: \"auto\", \r\n          height: \"auto\", \r\n          data: {\"title\": \"Permissions Error\", \r\n                \"message\": \"We were not able to find your location.\", \r\n                \"message2\": \"Ensure that locaions is allows for this site.\", \r\n                \"button\": \"OK\"}\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getMarketsDetail(marketId: string) {\r\n    this.setGettingDetailValue();\r\n      this.marketServ.getMarketDetailsById(marketId).subscribe(details => {\r\n        this.marketDetail = details;\r\n        this.gettingDetails = false;\r\n        console.log(\"Market Details\", details);\r\n      });\r\n  }\r\n\r\n  flipFavoriteValue(event:Event, marketId: string) {\r\n    event.stopPropagation()\r\n    let market = this.markets.find(item => item.marketNumber == marketId);\r\n    market.isFavorite = !market.isFavorite;\r\n    this.marketServ.flipFavoriteStatusById(marketId).subscribe(fav => {\r\n      console.log(\"favorite status\", fav);\r\n    });\r\n  }\r\n}\r\n","<div id=\"header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <img id=\"FMFLogo\" src=\"./../assets/Images/FMFLogo-250.png\"/>\r\n        <p id=\"FMFName\">Farmer's Market Finder</p>\r\n    </div>\r\n    <mat-icon (click)=\"openInfo()\">info</mat-icon>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div id=\"body\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n    <div id=\"innerBodyDiv\">\r\n        <p class=\"bodyText\">Farmer's Market Finder is a great tool that can find farmer's markets by either zip code or using your location.</p>\r\n        <p class=\"bodyText\">You can also favorite markets and view more details about them by clicking on them.</p>\r\n        \r\n        <div id=\"marketList\" fxLayout=\"column\">\r\n            <div id=\"controls\" fxLayout=\"row\" fxLayout.lt-sm=\"column\" fxLayoutAlign.lt-md=\"space-between center\" fxLayoutAlign.lt-lg=\"space-between center\" fxLayoutAlign=\"space-between center\">\r\n                <div id=\"zipCodeForm\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutAlign.lt-sm=\"space-between center\">\r\n                    <form [formGroup]=\"zipFormGroup\">\r\n                        <mat-form-field>\r\n                            <mat-label>Zip Code</mat-label>\r\n                            <input id=\"zip\" matInput formControlName=\"zip\" name=\"zip\" (keyup)=\"checkForEnter($event)\"/>\r\n                            <mat-error *ngIf=\"zipFormGroup.controls['zip'].hasError('pattern') && (zipFormGroup.controls['zip'].dirty || zipFormGroup.controls['zip'].touched)\">\r\n                                Only use digits 0-9.\r\n                            </mat-error>\r\n                            <mat-error *ngIf=\"!zipFormGroup.controls['zip'].hasError('pattern') && (zipFormGroup.controls['zip'].hasError('minlength')) || zipFormGroup.controls['zip'].hasError('maxlength') && (zipFormGroup.controls['zip'].dirty || zipFormGroup.controls['zip'].touched)\">\r\n                                Only use 5 digit zip code.\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </form>\r\n                    <button id=\"zipSearchBtn\" mat-raised-button (click)=\"listMarketsByZip()\">Search By Zip</button>\r\n                </div>\r\n                <p> - Or - </p>\r\n                <button id=\"locationSearchBtn\" mat-raised-button (click)=\"listMarketsByLocation()\">Search By My Location</button>\r\n            </div>\r\n\r\n            <div id=\"resultsPane\" *ngIf=\"!gettingList; else loadSpinner\">\r\n\r\n                <mat-accordion *ngIf=\"markets.length > 0; else noMarkets\">\r\n\r\n                    <mat-expansion-panel [expanded]=false hideToggle *ngFor=\"let market of markets\">\r\n                        <mat-expansion-panel-header (click)=\"getMarketsDetail(market.marketNumber)\">\r\n                            <mat-panel-title>\r\n                                <div class=\"marketItem\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n                                    <div fxLayout=\"row\">\r\n                                        <mat-icon class=\"marketIcon\">storefront</mat-icon>\r\n                                        <div fxLayout=\"column\">\r\n                                            <p class=\"marketName\">{{market.name}}</p>\r\n                                            <p class=\"marketDistance\">{{market.distance}} miles away</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <mat-icon class=\"favorite\" *ngIf=\"market.isFavorite; else notFavorite\" (click)=\"flipFavoriteValue($event, market.marketNumber)\">star</mat-icon>\r\n                                    <ng-template #notFavorite>\r\n                                        <mat-icon class=\"notFavorite\" (click)=\"flipFavoriteValue($event, market.marketNumber)\">star_border</mat-icon>\r\n                                    </ng-template>\r\n                                </div>\r\n                            </mat-panel-title>\r\n                        </mat-expansion-panel-header>\r\n                        <mat-divider class=\"detailDivider\"></mat-divider>\r\n                        <div class=\"marketDetails\" *ngIf=\"marketDetail\">\r\n                            <div *ngIf=\"!gettingDetails; else loadSpinner\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n                                <div fxFlex=\"45\" fxLayout=\"column\">\r\n                                    <div fxLayout=\"row\">\r\n                                        <mat-icon>location_on</mat-icon>\r\n                                        <div fxLayout=\"column\">\r\n                                            <p class=\"title\">Address:</p>\r\n                                            <p><a href=\"{{marketDetail.googleAddressUrl}}\" target=\"_blank\">{{marketDetail.address}}</a></p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div fxLayout=\"row\">\r\n                                        <mat-icon>schedule</mat-icon>\r\n                                        <div fxLayout=\"column\">\r\n                                            <p class=\"title\">Schedule:</p>\r\n                                            <p *ngFor=\"let item of marketDetail.schedule\">{{item}}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div fxFlex=\"45\" fxLayout=\"column\">\r\n                                    <div fxLayout=\"row\">\r\n                                        <mat-icon>category</mat-icon>\r\n                                        <div fxLayout=\"column\">\r\n                                            <p class=\"title\">Products:</p>\r\n                                            <p *ngFor=\"let item of marketDetail.products\">{{item}}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </mat-expansion-panel>\r\n                </mat-accordion>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #noMarkets>\r\n    <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n        <p class=\"bodyText\">No Markets Listed</p>\r\n        <p class=\"bodyText\">Try Searching by Zip or Locaiton</p>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #loadSpinner>\r\n    <div fxLayoutAlign=\"center center\">\r\n        <app-load-spinner></app-load-spinner>\r\n    </div>\r\n</ng-template>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n//Import Material\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { FriendlyMessageComponent } from './Modules/friendly-message/friendly-message.component';\r\nimport { AboutComponent } from './Modules/about/about.component';\r\nimport { LoadSpinnerComponent } from './Modules/load-spinner/load-spinner.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    FriendlyMessageComponent,\r\n    AboutComponent,\r\n    LoadSpinnerComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FlexLayoutModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n\r\n    // Material\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTreeModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent], \r\n  entryComponents: [\r\n    FriendlyMessageComponent,\r\n    AboutComponent\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false, \r\n  baseUrl: \"https://localhost:44354/api\"\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}